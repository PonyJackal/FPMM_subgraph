// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Collateral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collateral entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Collateral must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Collateral", id.toString(), this);
    }
  }

  static load(id: string): Collateral | null {
    return changetype<Collateral | null>(store.get("Collateral", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}

export class Condition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Condition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Condition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Condition", id.toString(), this);
    }
  }

  static load(id: string): Condition | null {
    return changetype<Condition | null>(store.get("Condition", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oracle(): Bytes {
    let value = this.get("oracle");
    return value!.toBytes();
  }

  set oracle(value: Bytes) {
    this.set("oracle", Value.fromBytes(value));
  }

  get questionId(): Bytes {
    let value = this.get("questionId");
    return value!.toBytes();
  }

  set questionId(value: Bytes) {
    this.set("questionId", Value.fromBytes(value));
  }

  get outcomeSlotCount(): i32 {
    let value = this.get("outcomeSlotCount");
    return value!.toI32();
  }

  set outcomeSlotCount(value: i32) {
    this.set("outcomeSlotCount", Value.fromI32(value));
  }

  get resolutionTimestamp(): BigInt | null {
    let value = this.get("resolutionTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set resolutionTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("resolutionTimestamp");
    } else {
      this.set("resolutionTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get payouts(): Array<BigDecimal> | null {
    let value = this.get("payouts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set payouts(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("payouts");
    } else {
      this.set("payouts", Value.fromBigDecimalArray(<Array<BigDecimal>>value));
    }
  }

  get payoutNumerators(): Array<BigInt> | null {
    let value = this.get("payoutNumerators");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set payoutNumerators(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("payoutNumerators");
    } else {
      this.set("payoutNumerators", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get payoutDenominator(): BigInt | null {
    let value = this.get("payoutDenominator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set payoutDenominator(value: BigInt | null) {
    if (!value) {
      this.unset("payoutDenominator");
    } else {
      this.set("payoutDenominator", Value.fromBigInt(<BigInt>value));
    }
  }

  get resolutionHash(): Bytes | null {
    let value = this.get("resolutionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set resolutionHash(value: Bytes | null) {
    if (!value) {
      this.unset("resolutionHash");
    } else {
      this.set("resolutionHash", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Split extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Split entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Split must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Split", id.toString(), this);
    }
  }

  static load(id: string): Split | null {
    return changetype<Split | null>(store.get("Split", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get stakeholder(): string {
    let value = this.get("stakeholder");
    return value!.toString();
  }

  set stakeholder(value: string) {
    this.set("stakeholder", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value!.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get parentCollectionId(): Bytes {
    let value = this.get("parentCollectionId");
    return value!.toBytes();
  }

  set parentCollectionId(value: Bytes) {
    this.set("parentCollectionId", Value.fromBytes(value));
  }

  get condition(): string {
    let value = this.get("condition");
    return value!.toString();
  }

  set condition(value: string) {
    this.set("condition", Value.fromString(value));
  }

  get partition(): Array<BigInt> {
    let value = this.get("partition");
    return value!.toBigIntArray();
  }

  set partition(value: Array<BigInt>) {
    this.set("partition", Value.fromBigIntArray(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Merge extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Merge entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Merge must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Merge", id.toString(), this);
    }
  }

  static load(id: string): Merge | null {
    return changetype<Merge | null>(store.get("Merge", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get stakeholder(): string {
    let value = this.get("stakeholder");
    return value!.toString();
  }

  set stakeholder(value: string) {
    this.set("stakeholder", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value!.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get parentCollectionId(): Bytes {
    let value = this.get("parentCollectionId");
    return value!.toBytes();
  }

  set parentCollectionId(value: Bytes) {
    this.set("parentCollectionId", Value.fromBytes(value));
  }

  get condition(): string {
    let value = this.get("condition");
    return value!.toString();
  }

  set condition(value: string) {
    this.set("condition", Value.fromString(value));
  }

  get partition(): Array<BigInt> {
    let value = this.get("partition");
    return value!.toBigIntArray();
  }

  set partition(value: Array<BigInt>) {
    this.set("partition", Value.fromBigIntArray(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Redemption extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Redemption entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Redemption must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Redemption", id.toString(), this);
    }
  }

  static load(id: string): Redemption | null {
    return changetype<Redemption | null>(store.get("Redemption", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get redeemer(): string {
    let value = this.get("redeemer");
    return value!.toString();
  }

  set redeemer(value: string) {
    this.set("redeemer", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value!.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get parentCollectionId(): Bytes {
    let value = this.get("parentCollectionId");
    return value!.toBytes();
  }

  set parentCollectionId(value: Bytes) {
    this.set("parentCollectionId", Value.fromBytes(value));
  }

  get condition(): string {
    let value = this.get("condition");
    return value!.toString();
  }

  set condition(value: string) {
    this.set("condition", Value.fromString(value));
  }

  get indexSets(): Array<BigInt> {
    let value = this.get("indexSets");
    return value!.toBigIntArray();
  }

  set indexSets(value: Array<BigInt>) {
    this.set("indexSets", Value.fromBigIntArray(value));
  }

  get payout(): BigInt {
    let value = this.get("payout");
    return value!.toBigInt();
  }

  set payout(value: BigInt) {
    this.set("payout", Value.fromBigInt(value));
  }
}

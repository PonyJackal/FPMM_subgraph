// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ApprovalForAll entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ApprovalForAll must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ApprovalForAll", id.toString(), this);
    }
  }

  static load(id: string): ApprovalForAll | null {
    return changetype<ApprovalForAll | null>(store.get("ApprovalForAll", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value!.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }
}

export class ConditionPreparation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ConditionPreparation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ConditionPreparation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ConditionPreparation", id.toString(), this);
    }
  }

  static load(id: string): ConditionPreparation | null {
    return changetype<ConditionPreparation | null>(
      store.get("ConditionPreparation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get conditionId(): Bytes {
    let value = this.get("conditionId");
    return value!.toBytes();
  }

  set conditionId(value: Bytes) {
    this.set("conditionId", Value.fromBytes(value));
  }

  get oracle(): Bytes {
    let value = this.get("oracle");
    return value!.toBytes();
  }

  set oracle(value: Bytes) {
    this.set("oracle", Value.fromBytes(value));
  }

  get questionId(): Bytes {
    let value = this.get("questionId");
    return value!.toBytes();
  }

  set questionId(value: Bytes) {
    this.set("questionId", Value.fromBytes(value));
  }

  get outcomeSlotCount(): BigInt {
    let value = this.get("outcomeSlotCount");
    return value!.toBigInt();
  }

  set outcomeSlotCount(value: BigInt) {
    this.set("outcomeSlotCount", Value.fromBigInt(value));
  }
}

export class ConditionResolution extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ConditionResolution entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ConditionResolution must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ConditionResolution", id.toString(), this);
    }
  }

  static load(id: string): ConditionResolution | null {
    return changetype<ConditionResolution | null>(
      store.get("ConditionResolution", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get conditionId(): Bytes {
    let value = this.get("conditionId");
    return value!.toBytes();
  }

  set conditionId(value: Bytes) {
    this.set("conditionId", Value.fromBytes(value));
  }

  get oracle(): Bytes {
    let value = this.get("oracle");
    return value!.toBytes();
  }

  set oracle(value: Bytes) {
    this.set("oracle", Value.fromBytes(value));
  }

  get questionId(): Bytes {
    let value = this.get("questionId");
    return value!.toBytes();
  }

  set questionId(value: Bytes) {
    this.set("questionId", Value.fromBytes(value));
  }

  get outcomeSlotCount(): BigInt {
    let value = this.get("outcomeSlotCount");
    return value!.toBigInt();
  }

  set outcomeSlotCount(value: BigInt) {
    this.set("outcomeSlotCount", Value.fromBigInt(value));
  }

  get payoutNumerators(): Array<BigInt> {
    let value = this.get("payoutNumerators");
    return value!.toBigIntArray();
  }

  set payoutNumerators(value: Array<BigInt>) {
    this.set("payoutNumerators", Value.fromBigIntArray(value));
  }
}

export class PayoutRedemption extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PayoutRedemption entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PayoutRedemption must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PayoutRedemption", id.toString(), this);
    }
  }

  static load(id: string): PayoutRedemption | null {
    return changetype<PayoutRedemption | null>(
      store.get("PayoutRedemption", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get redeemer(): Bytes {
    let value = this.get("redeemer");
    return value!.toBytes();
  }

  set redeemer(value: Bytes) {
    this.set("redeemer", Value.fromBytes(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    return value!.toBytes();
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get parentCollectionId(): Bytes {
    let value = this.get("parentCollectionId");
    return value!.toBytes();
  }

  set parentCollectionId(value: Bytes) {
    this.set("parentCollectionId", Value.fromBytes(value));
  }

  get conditionId(): Bytes {
    let value = this.get("conditionId");
    return value!.toBytes();
  }

  set conditionId(value: Bytes) {
    this.set("conditionId", Value.fromBytes(value));
  }

  get indexSets(): Array<BigInt> {
    let value = this.get("indexSets");
    return value!.toBigIntArray();
  }

  set indexSets(value: Array<BigInt>) {
    this.set("indexSets", Value.fromBigIntArray(value));
  }

  get payout(): BigInt {
    let value = this.get("payout");
    return value!.toBigInt();
  }

  set payout(value: BigInt) {
    this.set("payout", Value.fromBigInt(value));
  }
}

export class PositionSplit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PositionSplit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PositionSplit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PositionSplit", id.toString(), this);
    }
  }

  static load(id: string): PositionSplit | null {
    return changetype<PositionSplit | null>(store.get("PositionSplit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakeholder(): Bytes {
    let value = this.get("stakeholder");
    return value!.toBytes();
  }

  set stakeholder(value: Bytes) {
    this.set("stakeholder", Value.fromBytes(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    return value!.toBytes();
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get parentCollectionId(): Bytes {
    let value = this.get("parentCollectionId");
    return value!.toBytes();
  }

  set parentCollectionId(value: Bytes) {
    this.set("parentCollectionId", Value.fromBytes(value));
  }

  get conditionId(): Bytes {
    let value = this.get("conditionId");
    return value!.toBytes();
  }

  set conditionId(value: Bytes) {
    this.set("conditionId", Value.fromBytes(value));
  }

  get partition(): Array<BigInt> {
    let value = this.get("partition");
    return value!.toBigIntArray();
  }

  set partition(value: Array<BigInt>) {
    this.set("partition", Value.fromBigIntArray(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class PositionsMerge extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PositionsMerge entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PositionsMerge must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PositionsMerge", id.toString(), this);
    }
  }

  static load(id: string): PositionsMerge | null {
    return changetype<PositionsMerge | null>(store.get("PositionsMerge", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakeholder(): Bytes {
    let value = this.get("stakeholder");
    return value!.toBytes();
  }

  set stakeholder(value: Bytes) {
    this.set("stakeholder", Value.fromBytes(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    return value!.toBytes();
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get parentCollectionId(): Bytes {
    let value = this.get("parentCollectionId");
    return value!.toBytes();
  }

  set parentCollectionId(value: Bytes) {
    this.set("parentCollectionId", Value.fromBytes(value));
  }

  get conditionId(): Bytes {
    let value = this.get("conditionId");
    return value!.toBytes();
  }

  set conditionId(value: Bytes) {
    this.set("conditionId", Value.fromBytes(value));
  }

  get partition(): Array<BigInt> {
    let value = this.get("partition");
    return value!.toBigIntArray();
  }

  set partition(value: Array<BigInt>) {
    this.set("partition", Value.fromBigIntArray(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class TransferBatch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransferBatch entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransferBatch must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TransferBatch", id.toString(), this);
    }
  }

  static load(id: string): TransferBatch | null {
    return changetype<TransferBatch | null>(store.get("TransferBatch", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get ids(): Array<BigInt> {
    let value = this.get("ids");
    return value!.toBigIntArray();
  }

  set ids(value: Array<BigInt>) {
    this.set("ids", Value.fromBigIntArray(value));
  }

  get values(): Array<BigInt> {
    let value = this.get("values");
    return value!.toBigIntArray();
  }

  set values(value: Array<BigInt>) {
    this.set("values", Value.fromBigIntArray(value));
  }
}

export class TransferSingle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransferSingle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransferSingle must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TransferSingle", id.toString(), this);
    }
  }

  static load(id: string): TransferSingle | null {
    return changetype<TransferSingle | null>(store.get("TransferSingle", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class URI extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save URI entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type URI must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("URI", id.toString(), this);
    }
  }

  static load(id: string): URI | null {
    return changetype<URI | null>(store.get("URI", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value!.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }
}

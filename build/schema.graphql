type Collateral @entity {
  "Token address"
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
}

type Condition @entity {
  id: ID!
  "Address which can resolve this condition"
  oracle: Bytes!
  "Question ID which corresponds to this condition"
  questionId: Bytes!
  "Number of possible outcomes for this condition"
  outcomeSlotCount: Int!
  "Timestamp at which this condition was resolved"
  resolutionTimestamp: BigInt
  "Fraction of collateral assigned to each outcome"
  payouts: [BigDecimal!]
  payoutNumerators: [BigInt!]
  payoutDenominator: BigInt
  "Market makers which are trading on this condition"
  resolutionHash: Bytes
}

type Split @entity {
  "Transaction Hash"
  id: ID!
  "Timestamp at which split occurred"
  timestamp: BigInt!
  "Address which is performing this split"
  stakeholder: String!
  "Token which is collateralising positions being split"
  collateralToken: Collateral!
  parentCollectionId: Bytes!
  "Condition on which split is occuring"
  condition: Condition!
  partition: [BigInt!]!
  "The amount of collateral/outcome tokens being split"
  amount: BigInt!
}

type Merge @entity {
  "Transaction Hash"
  id: ID!
  "Timestamp at which merge occurred"
  timestamp: BigInt!
  "Address which is performing this merge"
  stakeholder: String!
  "Token which is collateralising positions being merged"
  collateralToken: Collateral!
  parentCollectionId: Bytes!
  "Condition on which merge is occuring"
  condition: Condition!
  partition: [BigInt!]!
  "The amount of outcome tokens being merged"
  amount: BigInt!
}

type Redemption @entity {
  "Transaction Hash"
  id: ID!
  "Timestamp at which redemption occurred"
  timestamp: BigInt!
  "Address which is redeeming these outcomes"
  redeemer: String!
  "Token which is being claimed in return for outcome tokens"
  collateralToken: Collateral!
  parentCollectionId: Bytes!
  "Condition on which redemption is occuring"
  condition: Condition!
  "Outcomes which are being redeemed"
  indexSets: [BigInt!]!
  "The amount of collateral being claimed"
  payout: BigInt!
}
